/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AssignServiceDto model module.
 * @module model/AssignServiceDto
 * @version v0
 */
class AssignServiceDto {
    /**
     * Constructs a new <code>AssignServiceDto</code>.
     * @alias module:model/AssignServiceDto
     * @param serviceId {Number} 
     * @param doctorId {Number} 
     */
    constructor(serviceId, doctorId) { 
        
        AssignServiceDto.initialize(this, serviceId, doctorId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, serviceId, doctorId) { 
        obj['serviceId'] = serviceId;
        obj['doctorId'] = doctorId;
    }

    /**
     * Constructs a <code>AssignServiceDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssignServiceDto} obj Optional instance to populate.
     * @return {module:model/AssignServiceDto} The populated <code>AssignServiceDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AssignServiceDto();

            if (data.hasOwnProperty('serviceId')) {
                obj['serviceId'] = ApiClient.convertToType(data['serviceId'], 'Number');
            }
            if (data.hasOwnProperty('doctorId')) {
                obj['doctorId'] = ApiClient.convertToType(data['doctorId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AssignServiceDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AssignServiceDto</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AssignServiceDto.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

AssignServiceDto.RequiredProperties = ["serviceId", "doctorId"];

/**
 * @member {Number} serviceId
 */
AssignServiceDto.prototype['serviceId'] = undefined;

/**
 * @member {Number} doctorId
 */
AssignServiceDto.prototype['doctorId'] = undefined;






export default AssignServiceDto;

