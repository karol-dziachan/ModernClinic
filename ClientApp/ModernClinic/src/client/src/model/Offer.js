/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OfferCategory from './OfferCategory';

/**
 * The Offer model module.
 * @module model/Offer
 * @version v0
 */
class Offer {
    /**
     * Constructs a new <code>Offer</code>.
     * @alias module:model/Offer
     */
    constructor() { 
        
        Offer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Offer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Offer} obj Optional instance to populate.
     * @return {module:model/Offer} The populated <code>Offer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Offer();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('offerCategory')) {
                obj['offerCategory'] = OfferCategory.constructFromObject(data['offerCategory']);
            }
            if (data.hasOwnProperty('promo')) {
                obj['promo'] = ApiClient.convertToType(data['promo'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('privateOffer')) {
                obj['privateOffer'] = ApiClient.convertToType(data['privateOffer'], 'Boolean');
            }
            if (data.hasOwnProperty('nfz')) {
                obj['nfz'] = ApiClient.convertToType(data['nfz'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Offer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Offer</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `offerCategory`
        if (data['offerCategory']) { // data not null
          OfferCategory.validateJSON(data['offerCategory']);
        }
        // ensure the json data is a string
        if (data['promo'] && !(typeof data['promo'] === 'string' || data['promo'] instanceof String)) {
            throw new Error("Expected the field `promo` to be a primitive type in the JSON string but got " + data['promo']);
        }

        return true;
    }


}



/**
 * @member {Number} id
 */
Offer.prototype['id'] = undefined;

/**
 * @member {String} name
 */
Offer.prototype['name'] = undefined;

/**
 * @member {module:model/OfferCategory} offerCategory
 */
Offer.prototype['offerCategory'] = undefined;

/**
 * @member {String} promo
 */
Offer.prototype['promo'] = undefined;

/**
 * @member {Number} price
 */
Offer.prototype['price'] = undefined;

/**
 * @member {Boolean} privateOffer
 */
Offer.prototype['privateOffer'] = undefined;

/**
 * @member {Boolean} nfz
 */
Offer.prototype['nfz'] = undefined;






export default Offer;

