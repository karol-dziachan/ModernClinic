/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Speciality from './Speciality';

/**
 * The Doctor model module.
 * @module model/Doctor
 * @version v0
 */
class Doctor {
    /**
     * Constructs a new <code>Doctor</code>.
     * @alias module:model/Doctor
     */
    constructor() { 
        
        Doctor.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Doctor</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Doctor} obj Optional instance to populate.
     * @return {module:model/Doctor} The populated <code>Doctor</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Doctor();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('degree')) {
                obj['degree'] = ApiClient.convertToType(data['degree'], 'String');
            }
            if (data.hasOwnProperty('degreeShort')) {
                obj['degreeShort'] = ApiClient.convertToType(data['degreeShort'], 'String');
            }
            if (data.hasOwnProperty('speciality')) {
                obj['speciality'] = Speciality.constructFromObject(data['speciality']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Doctor</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Doctor</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['degree'] && !(typeof data['degree'] === 'string' || data['degree'] instanceof String)) {
            throw new Error("Expected the field `degree` to be a primitive type in the JSON string but got " + data['degree']);
        }
        // ensure the json data is a string
        if (data['degreeShort'] && !(typeof data['degreeShort'] === 'string' || data['degreeShort'] instanceof String)) {
            throw new Error("Expected the field `degreeShort` to be a primitive type in the JSON string but got " + data['degreeShort']);
        }
        // validate the optional field `speciality`
        if (data['speciality']) { // data not null
          Speciality.validateJSON(data['speciality']);
        }

        return true;
    }


}



/**
 * @member {Number} id
 */
Doctor.prototype['id'] = undefined;

/**
 * @member {String} firstName
 */
Doctor.prototype['firstName'] = undefined;

/**
 * @member {String} lastName
 */
Doctor.prototype['lastName'] = undefined;

/**
 * @member {String} degree
 */
Doctor.prototype['degree'] = undefined;

/**
 * @member {String} degreeShort
 */
Doctor.prototype['degreeShort'] = undefined;

/**
 * @member {module:model/Speciality} speciality
 */
Doctor.prototype['speciality'] = undefined;






export default Doctor;

