/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Offer from '../model/Offer';
import PostOfferDto from '../model/PostOfferDto';

/**
* OfferController service.
* @module api/OfferControllerApi
* @version v0
*/
export default class OfferControllerApi {

    /**
    * Constructs a new OfferControllerApi. 
    * @alias module:api/OfferControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addOffer operation.
     * @callback module:api/OfferControllerApi~addOfferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostOfferDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/PostOfferDto} postOfferDto 
     * @param {module:api/OfferControllerApi~addOfferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostOfferDto}
     */
    addOffer(postOfferDto, callback) {
      let postBody = postOfferDto;
      // verify the required parameter 'postOfferDto' is set
      if (postOfferDto === undefined || postOfferDto === null) {
        throw new Error("Missing the required parameter 'postOfferDto' when calling addOffer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = PostOfferDto;
      return this.apiClient.callApi(
        '/api/offers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOffer operation.
     * @callback module:api/OfferControllerApi~deleteOfferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Offer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/OfferControllerApi~deleteOfferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Offer}
     */
    deleteOffer(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOffer");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Offer;
      return this.apiClient.callApi(
        '/api/offers/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllOffers operation.
     * @callback module:api/OfferControllerApi~getAllOffersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Offer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/OfferControllerApi~getAllOffersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Offer>}
     */
    getAllOffers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Offer];
      return this.apiClient.callApi(
        '/api/offers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOffer operation.
     * @callback module:api/OfferControllerApi~getOfferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Offer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/OfferControllerApi~getOfferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Offer}
     */
    getOffer(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOffer");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Offer;
      return this.apiClient.callApi(
        '/api/offers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOffersByCategoryId operation.
     * @callback module:api/OfferControllerApi~getOffersByCategoryIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Offer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/OfferControllerApi~getOffersByCategoryIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Offer>}
     */
    getOffersByCategoryId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOffersByCategoryId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Offer];
      return this.apiClient.callApi(
        '/api/offers/offers-by-category-id/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOffer operation.
     * @callback module:api/OfferControllerApi~updateOfferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Offer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:model/Offer} offer 
     * @param {module:api/OfferControllerApi~updateOfferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Offer}
     */
    updateOffer(id, offer, callback) {
      let postBody = offer;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateOffer");
      }
      // verify the required parameter 'offer' is set
      if (offer === undefined || offer === null) {
        throw new Error("Missing the required parameter 'offer' when calling updateOffer");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Offer;
      return this.apiClient.callApi(
        '/api/offers/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
