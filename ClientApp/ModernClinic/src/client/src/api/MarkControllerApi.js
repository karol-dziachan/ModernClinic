/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Mark from '../model/Mark';
import PostMarkDto from '../model/PostMarkDto';

/**
* MarkController service.
* @module api/MarkControllerApi
* @version v0
*/
export default class MarkControllerApi {

    /**
    * Constructs a new MarkControllerApi. 
    * @alias module:api/MarkControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addMark operation.
     * @callback module:api/MarkControllerApi~addMarkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostMarkDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/PostMarkDto} postMarkDto 
     * @param {module:api/MarkControllerApi~addMarkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostMarkDto}
     */
    addMark(postMarkDto, callback) {
      let postBody = postMarkDto;
      // verify the required parameter 'postMarkDto' is set
      if (postMarkDto === undefined || postMarkDto === null) {
        throw new Error("Missing the required parameter 'postMarkDto' when calling addMark");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = PostMarkDto;
      return this.apiClient.callApi(
        '/api/marks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMark operation.
     * @callback module:api/MarkControllerApi~deleteMarkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Mark} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/MarkControllerApi~deleteMarkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Mark}
     */
    deleteMark(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteMark");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Mark;
      return this.apiClient.callApi(
        '/api/marks/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllMarks operation.
     * @callback module:api/MarkControllerApi~getAllMarksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Mark>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/MarkControllerApi~getAllMarksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Mark>}
     */
    getAllMarks(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Mark];
      return this.apiClient.callApi(
        '/api/marks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMark operation.
     * @callback module:api/MarkControllerApi~getMarkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Mark} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/MarkControllerApi~getMarkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Mark}
     */
    getMark(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMark");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Mark;
      return this.apiClient.callApi(
        '/api/marks/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMarkByDoctor operation.
     * @callback module:api/MarkControllerApi~getMarkByDoctorCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Mark>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/MarkControllerApi~getMarkByDoctorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Mark>}
     */
    getMarkByDoctor(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMarkByDoctor");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Mark];
      return this.apiClient.callApi(
        '/api/marks/get-by-doctor/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMark operation.
     * @callback module:api/MarkControllerApi~updateMarkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Mark} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:model/Mark} mark 
     * @param {module:api/MarkControllerApi~updateMarkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Mark}
     */
    updateMark(id, mark, callback) {
      let postBody = mark;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateMark");
      }
      // verify the required parameter 'mark' is set
      if (mark === undefined || mark === null) {
        throw new Error("Missing the required parameter 'mark' when calling updateMark");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Mark;
      return this.apiClient.callApi(
        '/api/marks/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
