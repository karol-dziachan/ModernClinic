/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssignServiceDto from '../model/AssignServiceDto';
import Doctor from '../model/Doctor';
import GetAvailableSpecialistDto from '../model/GetAvailableSpecialistDto';
import GetSpecialistsDto from '../model/GetSpecialistsDto';
import Mark from '../model/Mark';
import PostDoctorDto from '../model/PostDoctorDto';
import PutDoctorDto from '../model/PutDoctorDto';
import Service from '../model/Service';

/**
* DoctorController service.
* @module api/DoctorControllerApi
* @version v0
*/
export default class DoctorControllerApi {

    /**
    * Constructs a new DoctorControllerApi. 
    * @alias module:api/DoctorControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addDoctor operation.
     * @callback module:api/DoctorControllerApi~addDoctorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostDoctorDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/PostDoctorDto} postDoctorDto 
     * @param {module:api/DoctorControllerApi~addDoctorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostDoctorDto}
     */
    addDoctor(postDoctorDto, callback) {
      let postBody = postDoctorDto;
      // verify the required parameter 'postDoctorDto' is set
      if (postDoctorDto === undefined || postDoctorDto === null) {
        throw new Error("Missing the required parameter 'postDoctorDto' when calling addDoctor");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = PostDoctorDto;
      return this.apiClient.callApi(
        '/api/doctors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assignService operation.
     * @callback module:api/DoctorControllerApi~assignServiceCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/AssignServiceDto} assignServiceDto 
     * @param {module:api/DoctorControllerApi~assignServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    assignService(assignServiceDto, callback) {
      let postBody = assignServiceDto;
      // verify the required parameter 'assignServiceDto' is set
      if (assignServiceDto === undefined || assignServiceDto === null) {
        throw new Error("Missing the required parameter 'assignServiceDto' when calling assignService");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/doctors/assign-service', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDoctor operation.
     * @callback module:api/DoctorControllerApi~deleteDoctorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Doctor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/DoctorControllerApi~deleteDoctorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Doctor}
     */
    deleteDoctor(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDoctor");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Doctor;
      return this.apiClient.callApi(
        '/api/doctors/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllDoctors operation.
     * @callback module:api/DoctorControllerApi~getAllDoctorsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Doctor>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DoctorControllerApi~getAllDoctorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Doctor>}
     */
    getAllDoctors(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Doctor];
      return this.apiClient.callApi(
        '/api/doctors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAvailableSpecialists operation.
     * @callback module:api/DoctorControllerApi~getAvailableSpecialistsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetAvailableSpecialistDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DoctorControllerApi~getAvailableSpecialistsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetAvailableSpecialistDto>}
     */
    getAvailableSpecialists(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [GetAvailableSpecialistDto];
      return this.apiClient.callApi(
        '/api/doctors/available-specialists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDoctor operation.
     * @callback module:api/DoctorControllerApi~getDoctorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Doctor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/DoctorControllerApi~getDoctorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Doctor}
     */
    getDoctor(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDoctor");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Doctor;
      return this.apiClient.callApi(
        '/api/doctors/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDoctor1 operation.
     * @callback module:api/DoctorControllerApi~getDoctor1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSpecialistsDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DoctorControllerApi~getDoctor1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSpecialistsDto}
     */
    getDoctor1(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GetSpecialistsDto;
      return this.apiClient.callApi(
        '/api/doctors/get-specialists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMarksByDoctorId operation.
     * @callback module:api/DoctorControllerApi~getMarksByDoctorIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Mark>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/DoctorControllerApi~getMarksByDoctorIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Mark>}
     */
    getMarksByDoctorId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMarksByDoctorId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Mark];
      return this.apiClient.callApi(
        '/api/doctors/marks-by-doctor/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getServicesByDoctorId operation.
     * @callback module:api/DoctorControllerApi~getServicesByDoctorIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Service>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/DoctorControllerApi~getServicesByDoctorIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Service>}
     */
    getServicesByDoctorId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getServicesByDoctorId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Service];
      return this.apiClient.callApi(
        '/api/doctors/services-by-doctor/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDoctor operation.
     * @callback module:api/DoctorControllerApi~updateDoctorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutDoctorDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:model/PutDoctorDto} putDoctorDto 
     * @param {module:api/DoctorControllerApi~updateDoctorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutDoctorDto}
     */
    updateDoctor(id, putDoctorDto, callback) {
      let postBody = putDoctorDto;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateDoctor");
      }
      // verify the required parameter 'putDoctorDto' is set
      if (putDoctorDto === undefined || putDoctorDto === null) {
        throw new Error("Missing the required parameter 'putDoctorDto' when calling updateDoctor");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = PutDoctorDto;
      return this.apiClient.callApi(
        '/api/doctors/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
