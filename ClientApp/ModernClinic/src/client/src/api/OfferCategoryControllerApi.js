/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import OfferCategory from '../model/OfferCategory';
import PostOfferCategoryDto from '../model/PostOfferCategoryDto';

/**
* OfferCategoryController service.
* @module api/OfferCategoryControllerApi
* @version v0
*/
export default class OfferCategoryControllerApi {

    /**
    * Constructs a new OfferCategoryControllerApi. 
    * @alias module:api/OfferCategoryControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addOfferCategory operation.
     * @callback module:api/OfferCategoryControllerApi~addOfferCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostOfferCategoryDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/PostOfferCategoryDto} postOfferCategoryDto 
     * @param {module:api/OfferCategoryControllerApi~addOfferCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostOfferCategoryDto}
     */
    addOfferCategory(postOfferCategoryDto, callback) {
      let postBody = postOfferCategoryDto;
      // verify the required parameter 'postOfferCategoryDto' is set
      if (postOfferCategoryDto === undefined || postOfferCategoryDto === null) {
        throw new Error("Missing the required parameter 'postOfferCategoryDto' when calling addOfferCategory");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = PostOfferCategoryDto;
      return this.apiClient.callApi(
        '/api/offer-categories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOfferCategory operation.
     * @callback module:api/OfferCategoryControllerApi~deleteOfferCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OfferCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/OfferCategoryControllerApi~deleteOfferCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OfferCategory}
     */
    deleteOfferCategory(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOfferCategory");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = OfferCategory;
      return this.apiClient.callApi(
        '/api/offer-categories/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllOfferCategorys operation.
     * @callback module:api/OfferCategoryControllerApi~getAllOfferCategorysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OfferCategory>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/OfferCategoryControllerApi~getAllOfferCategorysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OfferCategory>}
     */
    getAllOfferCategorys(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [OfferCategory];
      return this.apiClient.callApi(
        '/api/offer-categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOfferCategory operation.
     * @callback module:api/OfferCategoryControllerApi~getOfferCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OfferCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/OfferCategoryControllerApi~getOfferCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OfferCategory}
     */
    getOfferCategory(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOfferCategory");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = OfferCategory;
      return this.apiClient.callApi(
        '/api/offer-categories/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOfferCategory operation.
     * @callback module:api/OfferCategoryControllerApi~updateOfferCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OfferCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:model/OfferCategory} offerCategory 
     * @param {module:api/OfferCategoryControllerApi~updateOfferCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OfferCategory}
     */
    updateOfferCategory(id, offerCategory, callback) {
      let postBody = offerCategory;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateOfferCategory");
      }
      // verify the required parameter 'offerCategory' is set
      if (offerCategory === undefined || offerCategory === null) {
        throw new Error("Missing the required parameter 'offerCategory' when calling updateOfferCategory");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = OfferCategory;
      return this.apiClient.callApi(
        '/api/offer-categories/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
