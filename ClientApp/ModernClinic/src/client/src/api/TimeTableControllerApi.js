/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetAvailableTimeTableDto from '../model/GetAvailableTimeTableDto';
import PostTimeTableDto from '../model/PostTimeTableDto';
import TimeTable from '../model/TimeTable';

/**
* TimeTableController service.
* @module api/TimeTableControllerApi
* @version v0
*/
export default class TimeTableControllerApi {

    /**
    * Constructs a new TimeTableControllerApi. 
    * @alias module:api/TimeTableControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addTimeTable operation.
     * @callback module:api/TimeTableControllerApi~addTimeTableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostTimeTableDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/PostTimeTableDto} postTimeTableDto 
     * @param {module:api/TimeTableControllerApi~addTimeTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostTimeTableDto}
     */
    addTimeTable(postTimeTableDto, callback) {
      let postBody = postTimeTableDto;
      // verify the required parameter 'postTimeTableDto' is set
      if (postTimeTableDto === undefined || postTimeTableDto === null) {
        throw new Error("Missing the required parameter 'postTimeTableDto' when calling addTimeTable");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = PostTimeTableDto;
      return this.apiClient.callApi(
        '/api/time-table', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTimeTable operation.
     * @callback module:api/TimeTableControllerApi~deleteTimeTableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimeTable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/TimeTableControllerApi~deleteTimeTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TimeTable}
     */
    deleteTimeTable(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTimeTable");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TimeTable;
      return this.apiClient.callApi(
        '/api/time-table/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllTimeTables operation.
     * @callback module:api/TimeTableControllerApi~getAllTimeTablesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TimeTable>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/TimeTableControllerApi~getAllTimeTablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TimeTable>}
     */
    getAllTimeTables(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TimeTable];
      return this.apiClient.callApi(
        '/api/time-table', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAvailableTimeTables operation.
     * @callback module:api/TimeTableControllerApi~getAvailableTimeTablesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetAvailableTimeTableDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/TimeTableControllerApi~getAvailableTimeTablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetAvailableTimeTableDto>}
     */
    getAvailableTimeTables(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [GetAvailableTimeTableDto];
      return this.apiClient.callApi(
        '/api/time-table/available-time-table', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTimeTable operation.
     * @callback module:api/TimeTableControllerApi~getTimeTableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimeTable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/TimeTableControllerApi~getTimeTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TimeTable}
     */
    getTimeTable(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTimeTable");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TimeTable;
      return this.apiClient.callApi(
        '/api/time-table/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTimeTable operation.
     * @callback module:api/TimeTableControllerApi~updateTimeTableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimeTable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:model/TimeTable} timeTable 
     * @param {module:api/TimeTableControllerApi~updateTimeTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TimeTable}
     */
    updateTimeTable(id, timeTable, callback) {
      let postBody = timeTable;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTimeTable");
      }
      // verify the required parameter 'timeTable' is set
      if (timeTable === undefined || timeTable === null) {
        throw new Error("Missing the required parameter 'timeTable' when calling updateTimeTable");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = TimeTable;
      return this.apiClient.callApi(
        '/api/time-table/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
