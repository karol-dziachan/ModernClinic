/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Doctor from '../model/Doctor';
import Speciality from '../model/Speciality';

/**
* SpecialityController service.
* @module api/SpecialityControllerApi
* @version v0
*/
export default class SpecialityControllerApi {

    /**
    * Constructs a new SpecialityControllerApi. 
    * @alias module:api/SpecialityControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createSpeciality operation.
     * @callback module:api/SpecialityControllerApi~createSpecialityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Speciality} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Speciality} speciality 
     * @param {module:api/SpecialityControllerApi~createSpecialityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Speciality}
     */
    createSpeciality(speciality, callback) {
      let postBody = speciality;
      // verify the required parameter 'speciality' is set
      if (speciality === undefined || speciality === null) {
        throw new Error("Missing the required parameter 'speciality' when calling createSpeciality");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Speciality;
      return this.apiClient.callApi(
        '/api/specialities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSpeciality operation.
     * @callback module:api/SpecialityControllerApi~deleteSpecialityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Speciality} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/SpecialityControllerApi~deleteSpecialityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Speciality}
     */
    deleteSpeciality(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSpeciality");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Speciality;
      return this.apiClient.callApi(
        '/api/specialities/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllSpecialities operation.
     * @callback module:api/SpecialityControllerApi~getAllSpecialitiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Speciality>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/SpecialityControllerApi~getAllSpecialitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Speciality>}
     */
    getAllSpecialities(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Speciality];
      return this.apiClient.callApi(
        '/api/specialities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDoctorsBySpecialityId operation.
     * @callback module:api/SpecialityControllerApi~getDoctorsBySpecialityIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Doctor>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/SpecialityControllerApi~getDoctorsBySpecialityIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Doctor>}
     */
    getDoctorsBySpecialityId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDoctorsBySpecialityId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Doctor];
      return this.apiClient.callApi(
        '/api/specialities/doctors-by-speciality-id/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSpeciality operation.
     * @callback module:api/SpecialityControllerApi~getSpecialityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Speciality} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/SpecialityControllerApi~getSpecialityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Speciality}
     */
    getSpeciality(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSpeciality");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Speciality;
      return this.apiClient.callApi(
        '/api/specialities/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSpecialityByDoctorId operation.
     * @callback module:api/SpecialityControllerApi~getSpecialityByDoctorIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Speciality} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/SpecialityControllerApi~getSpecialityByDoctorIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Speciality}
     */
    getSpecialityByDoctorId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSpecialityByDoctorId");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Speciality;
      return this.apiClient.callApi(
        '/api/specialities/speciality-by-doctor-id/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSpeciality operation.
     * @callback module:api/SpecialityControllerApi~updateSpecialityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Speciality} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:model/Speciality} speciality 
     * @param {module:api/SpecialityControllerApi~updateSpecialityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Speciality}
     */
    updateSpeciality(id, speciality, callback) {
      let postBody = speciality;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateSpeciality");
      }
      // verify the required parameter 'speciality' is set
      if (speciality === undefined || speciality === null) {
        throw new Error("Missing the required parameter 'speciality' when calling updateSpeciality");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Speciality;
      return this.apiClient.callApi(
        '/api/specialities/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
