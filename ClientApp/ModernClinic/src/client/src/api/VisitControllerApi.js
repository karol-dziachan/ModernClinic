/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetAllVisitsDto from '../model/GetAllVisitsDto';
import GetUpcommingVisitDto from '../model/GetUpcommingVisitDto';
import PostVisitDto from '../model/PostVisitDto';
import Visit from '../model/Visit';

/**
* VisitController service.
* @module api/VisitControllerApi
* @version v0
*/
export default class VisitControllerApi {

    /**
    * Constructs a new VisitControllerApi. 
    * @alias module:api/VisitControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addVisit operation.
     * @callback module:api/VisitControllerApi~addVisitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Visit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Visit} visit 
     * @param {module:api/VisitControllerApi~addVisitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Visit}
     */
    addVisit(visit, callback) {
      let postBody = visit;
      // verify the required parameter 'visit' is set
      if (visit === undefined || visit === null) {
        throw new Error("Missing the required parameter 'visit' when calling addVisit");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Visit;
      return this.apiClient.callApi(
        '/api/visits', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bookVisit operation.
     * @callback module:api/VisitControllerApi~bookVisitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Visit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/PostVisitDto} postVisitDto 
     * @param {module:api/VisitControllerApi~bookVisitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Visit}
     */
    bookVisit(postVisitDto, callback) {
      let postBody = postVisitDto;
      // verify the required parameter 'postVisitDto' is set
      if (postVisitDto === undefined || postVisitDto === null) {
        throw new Error("Missing the required parameter 'postVisitDto' when calling bookVisit");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Visit;
      return this.apiClient.callApi(
        '/api/visits/book-visit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVisit operation.
     * @callback module:api/VisitControllerApi~deleteVisitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Visit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/VisitControllerApi~deleteVisitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Visit}
     */
    deleteVisit(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteVisit");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Visit;
      return this.apiClient.callApi(
        '/api/visits/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllVisits operation.
     * @callback module:api/VisitControllerApi~getAllVisitsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Visit>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/VisitControllerApi~getAllVisitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Visit>}
     */
    getAllVisits(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Visit];
      return this.apiClient.callApi(
        '/api/visits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllVisitsForPatient operation.
     * @callback module:api/VisitControllerApi~getAllVisitsForPatientCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllVisitsDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/VisitControllerApi~getAllVisitsForPatientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAllVisitsDto}
     */
    getAllVisitsForPatient(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GetAllVisitsDto;
      return this.apiClient.callApi(
        '/api/visits/get-all-visits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNearestVisitForPatient operation.
     * @callback module:api/VisitControllerApi~getNearestVisitForPatientCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUpcommingVisitDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/VisitControllerApi~getNearestVisitForPatientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUpcommingVisitDto}
     */
    getNearestVisitForPatient(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GetUpcommingVisitDto;
      return this.apiClient.callApi(
        '/api/visits/get-nearest-visit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVisit operation.
     * @callback module:api/VisitControllerApi~getVisitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Visit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/VisitControllerApi~getVisitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Visit}
     */
    getVisit(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVisit");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Visit;
      return this.apiClient.callApi(
        '/api/visits/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVisit operation.
     * @callback module:api/VisitControllerApi~updateVisitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Visit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:model/Visit} visit 
     * @param {module:api/VisitControllerApi~updateVisitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Visit}
     */
    updateVisit(id, visit, callback) {
      let postBody = visit;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateVisit");
      }
      // verify the required parameter 'visit' is set
      if (visit === undefined || visit === null) {
        throw new Error("Missing the required parameter 'visit' when calling updateVisit");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Visit;
      return this.apiClient.callApi(
        '/api/visits/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
